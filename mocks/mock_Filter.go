// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockFilter is an autogenerated mock type for the Filter type
type MockFilter struct {
	mock.Mock
}

type MockFilter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFilter) EXPECT() *MockFilter_Expecter {
	return &MockFilter_Expecter{mock: &_m.Mock}
}

// Filter provides a mock function with given fields: ctx, filename
func (_m *MockFilter) Filter(ctx context.Context, filename string) (bool, error) {
	ret := _m.Called(ctx, filename)

	if len(ret) == 0 {
		panic("no return value specified for Filter")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, filename)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, filename)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFilter_Filter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Filter'
type MockFilter_Filter_Call struct {
	*mock.Call
}

// Filter is a helper method to define mock.On call
//   - ctx context.Context
//   - filename string
func (_e *MockFilter_Expecter) Filter(ctx interface{}, filename interface{}) *MockFilter_Filter_Call {
	return &MockFilter_Filter_Call{Call: _e.mock.On("Filter", ctx, filename)}
}

func (_c *MockFilter_Filter_Call) Run(run func(ctx context.Context, filename string)) *MockFilter_Filter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFilter_Filter_Call) Return(_a0 bool, _a1 error) *MockFilter_Filter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFilter_Filter_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockFilter_Filter_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFilter creates a new instance of MockFilter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFilter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFilter {
	mock := &MockFilter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
